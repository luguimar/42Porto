!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/luguimar/Documents/42Porto_repository/common_core_files/evaluations/damachad_cub3d/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(LIBFT)	Makefile	/^$(LIBFT):$/;"	t
$(MLX)	Makefile	/^$(MLX):$/;"	t
$(NAME)	Makefile	/^$(NAME): $(OBJ_DIR) $(OBJ) $(LIBFT) $(MLX)$/;"	t
$(NAME)	libft/Makefile	/^$(NAME): $(OBJ_DIR) $(OBJ)$/;"	t
$(NAME)	mlx/Makefile.mk	/^$(NAME)	: $(OBJ)$/;"	t
$(NAME)	mlx/test/Makefile.mk	/^$(NAME): $(OBJ)$/;"	t
$(NAME_BNS)	Makefile	/^$(NAME_BNS): $(OBJ_BNS_DIR) $(OBJ_BNS) $(LIBFT) $(MLX)$/;"	t
$(OBJ_BNS_DIR)	Makefile	/^$(OBJ_BNS_DIR):$/;"	t
$(OBJ_BNS_DIR)/%.o	Makefile	/^$(OBJ_BNS_DIR)\/%.o : $(SRC_BNS_DIR)\/%.c $/;"	t
$(OBJ_DIR)	Makefile	/^$(OBJ_DIR):$/;"	t
$(OBJ_DIR)	libft/Makefile	/^$(OBJ_DIR):$/;"	t
$(OBJ_DIR)/%.o	Makefile	/^$(OBJ_DIR)\/%.o : $(SRC_DIR)\/%.c $/;"	t
$(OBJ_DIR)/%.o	libft/Makefile	/^$(OBJ_DIR)\/%.o: %.c$/;"	t
$(OBJ_DIR)/%.o	mlx/Makefile.mk	/^$(OBJ_DIR)\/%.o: %.c$/;"	t
AR	libft/Makefile	/^AR = ar -rcs$/;"	m
AUTHOR	mlx/man/man1/mlx.1	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	mlx/man/man1/mlx_loop.1	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	mlx/man/man1/mlx_new_image.1	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	mlx/man/man1/mlx_new_window.1	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	mlx/man/man1/mlx_pixel_put.1	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	mlx/man/man3/mlx.3	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	mlx/man/man3/mlx_loop.3	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	mlx/man/man3/mlx_new_image.3	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	mlx/man/man3/mlx_new_window.3	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	mlx/man/man3/mlx_pixel_put.3	/^.SH AUTHOR$/;"	s	title:MiniLibX
BLACK	Makefile	/^BLACK 	= \\033[1;30m$/;"	m
BLACK	includes/cub3d.h	/^# define BLACK /;"	d
BLACK	includes/cub3d_bonus.h	/^# define BLACK /;"	d
BLACK	libft/Makefile	/^BLACK 	= \\033[1;30m$/;"	m
BLUE	Makefile	/^BLUE	= \\033[1;34m$/;"	m
BLUE	includes/cub3d.h	/^# define BLUE /;"	d
BLUE	includes/cub3d_bonus.h	/^# define BLUE /;"	d
BLUE	libft/Makefile	/^BLUE	= \\033[1;34m$/;"	m
BUFFER_SIZE	libft/libft.h	/^#  define BUFFER_SIZE /;"	d
CC	Makefile	/^CC = cc$/;"	m
CC	libft/Makefile	/^CC = cc$/;"	m
CC	mlx/Makefile.mk	/^	CC = clang$/;"	m
CC	mlx/Makefile.mk	/^CC	= gcc$/;"	m
CC	mlx/test/Makefile.mk	/^	CC	= gcc$/;"	m
CC	mlx/test/Makefile.mk	/^	CC = clang$/;"	m
CEILING	includes/cub3d.h	/^	CEILING$/;"	e	enum:s_color_type
CEILING	includes/cub3d_bonus.h	/^	CEILING$/;"	e	enum:s_color_type
CFLAGS	Makefile	/^CFLAGS 	= -Wall -Werror -Wextra$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Werror -Wextra$/;"	m
CFLAGS	mlx/Makefile.mk	/^CFLAGS	= -O3 -I$(INC)$/;"	m
CFLAGS	mlx/test/Makefile.mk	/^CFLAGS= -I$(INC) -O3 -I.. -g$/;"	m
COLOR	mlx/man/man1/mlx_pixel_put.1	/^.SH COLOR MANAGEMENT$/;"	s	title:MiniLibX
COLOR	mlx/man/man3/mlx_pixel_put.3	/^.SH COLOR MANAGEMENT$/;"	s	title:MiniLibX
CUB3D_BONUS_H	includes/cub3d_bonus.h	/^# define CUB3D_BONUS_H$/;"	d
CUB3D_H	includes/cub3d.h	/^# define CUB3D_H$/;"	d
CUB_SIDE	includes/cub3d.h	/^# define CUB_SIDE /;"	d
CUB_SIDE	includes/cub3d_bonus.h	/^# define CUB_SIDE /;"	d
CYAN	Makefile	/^CYAN 	= \\033[1;36m$/;"	m
CYAN	libft/Makefile	/^CYAN 	= \\033[1;36m$/;"	m
DESCRIPTION	mlx/man/man1/mlx.1	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	mlx/man/man1/mlx_loop.1	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	mlx/man/man1/mlx_new_image.1	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	mlx/man/man1/mlx_new_window.1	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	mlx/man/man1/mlx_pixel_put.1	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	mlx/man/man3/mlx.3	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	mlx/man/man3/mlx_loop.3	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	mlx/man/man3/mlx_new_image.3	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	mlx/man/man3/mlx_new_window.3	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	mlx/man/man3/mlx_pixel_put.3	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
E	includes/cub3d.h	/^	E,$/;"	e	enum:s_dir
E	includes/cub3d_bonus.h	/^	E,$/;"	e	enum:s_dir
ENV_DISPLAY	mlx/mlx_int.h	/^# define ENV_DISPLAY /;"	d
EOF	mlx/configure	/^cat <<EOF$/;"	h
ERR_NO_TRUECOLOR	mlx/mlx_int.h	/^# define ERR_NO_TRUECOLOR /;"	d
FILES	Makefile	/^FILES 		= main init clean draw_line textures raycasting \\$/;"	m
FILES_BNS	Makefile	/^FILES_BNS	= $(FILES) minimap_bonus$/;"	m
FLOOR	includes/cub3d.h	/^	FLOOR,$/;"	e	enum:s_color_type
FLOOR	includes/cub3d_bonus.h	/^	FLOOR,$/;"	e	enum:s_color_type
FOV	includes/cub3d.h	/^# define FOV /;"	d
FOV	includes/cub3d_bonus.h	/^# define FOV /;"	d
GOING	mlx/man/man1/mlx_loop.1	/^.SH GOING FURTHER WITH EVENTS$/;"	s	title:MiniLibX
GOING	mlx/man/man3/mlx_loop.3	/^.SH GOING FURTHER WITH EVENTS$/;"	s	title:MiniLibX
GREEN	Makefile	/^GREEN 	= \\033[1;32m$/;"	m
GREEN	includes/cub3d.h	/^# define GREEN /;"	d
GREEN	includes/cub3d_bonus.h	/^# define GREEN /;"	d
GREEN	libft/Makefile	/^GREEN 	= \\033[1;32m$/;"	m
IM1_SX	mlx/test/main.c	/^#define	IM1_SX	/;"	d	file:
IM1_SY	mlx/test/main.c	/^#define	IM1_SY	/;"	d	file:
IM3_SX	mlx/test/main.c	/^#define	IM3_SX	/;"	d	file:
IM3_SY	mlx/test/main.c	/^#define	IM3_SY	/;"	d	file:
INC	Makefile	/^INC			= includes$/;"	m
INC	mlx/Makefile.mk	/^INC	=%%%%$/;"	m
INC	mlx/test/Makefile.mk	/^INC=%%%%$/;"	m
INCLIB	mlx/test/Makefile.mk	/^INCLIB=$(INC)\/..\/lib$/;"	m
INCLUDE	mlx/man/man1/mlx.1	/^.SH INCLUDE FILE$/;"	s	title:MiniLibX
INCLUDE	mlx/man/man3/mlx.3	/^.SH INCLUDE FILE$/;"	s	title:MiniLibX
LFLAGS	Makefile	/^LFLAGS 	= -L .\/libft -lft -L .\/mlx -lmlx -lXext -lX11 -lm -lbsd$/;"	m
LFLAGS	mlx/test/Makefile.mk	/^LFLAGS = -L.. -lmlx -L$(INCLIB) -lXext -lX11 -lm$/;"	m
LIBFT	Makefile	/^LIBFT		= libft\/libft.a$/;"	m
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
LIBRARY	mlx/man/man1/mlx.1	/^.SH LIBRARY FUNCTIONS$/;"	s	title:MiniLibX
LIBRARY	mlx/man/man3/mlx.3	/^.SH LIBRARY FUNCTIONS$/;"	s	title:MiniLibX
LINKING	mlx/man/man1/mlx.1	/^.SH LINKING MiniLibX$/;"	s	title:MiniLibX
LINKING	mlx/man/man3/mlx.3	/^.SH LINKING MiniLibX$/;"	s	title:MiniLibX
LOCALHOST	mlx/mlx_int.h	/^# define LOCALHOST /;"	d
MAP	Makefile	/^MAP			= subject_map.cub$/;"	m
MAP_DIR	Makefile	/^MAP_DIR		= maps\/valid\/$/;"	m
MINIMAP_SCALE	includes/cub3d.h	/^# define MINIMAP_SCALE /;"	d
MINIMAP_SCALE	includes/cub3d_bonus.h	/^# define MINIMAP_SCALE /;"	d
MK_FLAG	Makefile	/^MK_FLAG = --no-print-directory$/;"	m
MLX	Makefile	/^MLX			= mlx\/libmlx.a$/;"	m
MLX_H	mlx/mlx.h	/^#define	MLX_H$/;"	d
MLX_INT_H	mlx/mlx_int.h	/^# define MLX_INT_H$/;"	d
MLX_MAX_EVENT	mlx/mlx_int.h	/^# define MLX_MAX_EVENT /;"	d
MLX_TYPE_SHM	mlx/mlx_int.h	/^# define MLX_TYPE_SHM /;"	d
MLX_TYPE_SHM_PIXMAP	mlx/mlx_int.h	/^# define MLX_TYPE_SHM_PIXMAP /;"	d
MLX_TYPE_XIMAGE	mlx/mlx_int.h	/^# define MLX_TYPE_XIMAGE /;"	d
MiniLibX	mlx/man/man1/mlx.1	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	mlx/man/man1/mlx_loop.1	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	mlx/man/man1/mlx_new_image.1	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	mlx/man/man1/mlx_new_window.1	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	mlx/man/man1/mlx_pixel_put.1	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	mlx/man/man3/mlx.3	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	mlx/man/man3/mlx_loop.3	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	mlx/man/man3/mlx_new_image.3	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	mlx/man/man3/mlx_new_window.3	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	mlx/man/man3/mlx_pixel_put.3	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
N	includes/cub3d.h	/^	N,$/;"	e	enum:s_dir
N	includes/cub3d_bonus.h	/^	N,$/;"	e	enum:s_dir
NAME	Makefile	/^NAME 		= cub3D$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
NAME	mlx/Makefile.mk	/^NAME		= libmlx.a$/;"	m
NAME	mlx/man/man1/mlx.1	/^.SH NAME$/;"	s	title:MiniLibX
NAME	mlx/man/man1/mlx_loop.1	/^.SH NAME$/;"	s	title:MiniLibX
NAME	mlx/man/man1/mlx_new_image.1	/^.SH NAME$/;"	s	title:MiniLibX
NAME	mlx/man/man1/mlx_new_window.1	/^.SH NAME$/;"	s	title:MiniLibX
NAME	mlx/man/man1/mlx_pixel_put.1	/^.SH NAME$/;"	s	title:MiniLibX
NAME	mlx/man/man3/mlx.3	/^.SH NAME$/;"	s	title:MiniLibX
NAME	mlx/man/man3/mlx_loop.3	/^.SH NAME$/;"	s	title:MiniLibX
NAME	mlx/man/man3/mlx_new_image.3	/^.SH NAME$/;"	s	title:MiniLibX
NAME	mlx/man/man3/mlx_new_window.3	/^.SH NAME$/;"	s	title:MiniLibX
NAME	mlx/man/man3/mlx_pixel_put.3	/^.SH NAME$/;"	s	title:MiniLibX
NAME	mlx/test/Makefile.mk	/^NAME= mlx-test$/;"	m
NAME_BNS	Makefile	/^NAME_BNS	= cub3D_bonus$/;"	m
NAME_UNAME	mlx/Makefile.mk	/^NAME_UNAME	= libmlx_$(UNAME).a$/;"	m
NB_SPRITES	includes/cub3d.h	/^# define NB_SPRITES /;"	d
NB_SPRITES	includes/cub3d_bonus.h	/^# define NB_SPRITES /;"	d
OBJ	Makefile	/^OBJ 		= $(addprefix $(OBJ_DIR)\/, $(addsuffix .o, $(FILES)))$/;"	m
OBJ	libft/Makefile	/^OBJ = $(addprefix $(OBJ_DIR)\/, $(SRC:.c=.o))$/;"	m
OBJ	mlx/Makefile.mk	/^OBJ	= $(addprefix $(OBJ_DIR)\/,$(SRC:%.c=%.o))$/;"	m
OBJ	mlx/test/Makefile.mk	/^OBJ = $(SRC:%.c=%.o)$/;"	m
OBJ_BNS	Makefile	/^OBJ_BNS 	= $(addprefix $(OBJ_BNS_DIR)\/, $(addsuffix .o, $(FILES_BNS)))$/;"	m
OBJ_BNS_DIR	Makefile	/^OBJ_BNS_DIR	= objs_bonus$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR		= objs$/;"	m
OBJ_DIR	libft/Makefile	/^OBJ_DIR = objs$/;"	m
OBJ_DIR	mlx/Makefile.mk	/^OBJ_DIR = obj$/;"	m
PI	includes/cub3d.h	/^# define PI /;"	d
PI	includes/cub3d_bonus.h	/^# define PI /;"	d
PI_DOUBLE	includes/cub3d.h	/^# define PI_DOUBLE /;"	d
PI_DOUBLE	includes/cub3d_bonus.h	/^# define PI_DOUBLE /;"	d
PI_HALF	includes/cub3d.h	/^# define PI_HALF /;"	d
PI_HALF	includes/cub3d_bonus.h	/^# define PI_HALF /;"	d
PI_THREE_HALFS	includes/cub3d.h	/^# define PI_THREE_HALFS /;"	d
PI_THREE_HALFS	includes/cub3d_bonus.h	/^# define PI_THREE_HALFS /;"	d
PURPLE	Makefile	/^PURPLE 	= \\033[1;35m$/;"	m
PURPLE	libft/Makefile	/^PURPLE 	= \\033[1;35m$/;"	m
RED	Makefile	/^RED 	= \\033[1;31m$/;"	m
RED	includes/cub3d.h	/^# define RED /;"	d
RED	includes/cub3d_bonus.h	/^# define RED /;"	d
RED	libft/Makefile	/^RED 	= \\033[1;31m$/;"	m
RESET	Makefile	/^RESET	= \\033[0m$/;"	m
RESET	libft/Makefile	/^RESET	= \\033[0m$/;"	m
RETURN	mlx/man/man1/mlx.1	/^.SH RETURN VALUES$/;"	s	title:MiniLibX
RETURN	mlx/man/man1/mlx_new_image.1	/^.SH RETURN VALUES$/;"	s	title:MiniLibX
RETURN	mlx/man/man1/mlx_new_window.1	/^.SH RETURN VALUES$/;"	s	title:MiniLibX
RETURN	mlx/man/man3/mlx.3	/^.SH RETURN VALUES$/;"	s	title:MiniLibX
RETURN	mlx/man/man3/mlx_new_image.3	/^.SH RETURN VALUES$/;"	s	title:MiniLibX
RETURN	mlx/man/man3/mlx_new_window.3	/^.SH RETURN VALUES$/;"	s	title:MiniLibX
RETURN	mlx/mlx_xpm.c	/^#define	RETURN	/;"	d	file:
RM	Makefile	/^RM = rm -rf$/;"	m
RM	libft/Makefile	/^RM = rm -rf$/;"	m
ROT_SPEED	includes/cub3d.h	/^# define ROT_SPEED /;"	d
ROT_SPEED	includes/cub3d_bonus.h	/^# define ROT_SPEED /;"	d
S	includes/cub3d.h	/^	S,$/;"	e	enum:s_dir
S	includes/cub3d_bonus.h	/^	S,$/;"	e	enum:s_dir
SBLINK	Makefile	/^SBLINK 	= \\033[5m$/;"	m
SCREEN_HEIGHT	includes/cub3d.h	/^# define SCREEN_HEIGHT /;"	d
SCREEN_HEIGHT	includes/cub3d_bonus.h	/^# define SCREEN_HEIGHT /;"	d
SCREEN_WIDTH	includes/cub3d.h	/^# define SCREEN_WIDTH /;"	d
SCREEN_WIDTH	includes/cub3d_bonus.h	/^# define SCREEN_WIDTH /;"	d
SEE	mlx/man/man1/mlx.1	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	mlx/man/man1/mlx_loop.1	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	mlx/man/man1/mlx_new_image.1	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	mlx/man/man1/mlx_new_window.1	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	mlx/man/man1/mlx_pixel_put.1	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	mlx/man/man3/mlx.3	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	mlx/man/man3/mlx_loop.3	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	mlx/man/man3/mlx_new_image.3	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	mlx/man/man3/mlx_new_window.3	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	mlx/man/man3/mlx_pixel_put.3	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SLIDE_BUFF	includes/cub3d.h	/^# define SLIDE_BUFF /;"	d
SLIDE_BUFF	includes/cub3d_bonus.h	/^# define SLIDE_BUFF /;"	d
SPEED	includes/cub3d.h	/^# define SPEED /;"	d
SPEED	includes/cub3d_bonus.h	/^# define SPEED /;"	d
SRC	Makefile	/^SRC 		= $(addprefix $(SRC_DIR)\/, $(addsuffix .c, $(FILES)))$/;"	m
SRC	libft/Makefile	/^SRC = $(SRC_LIBFT) $(SRC_PRINTF) $(SRC_GNL)$/;"	m
SRC	mlx/Makefile.mk	/^SRC	= mlx_init.c mlx_new_window.c mlx_pixel_put.c mlx_loop.c \\$/;"	m
SRC	mlx/test/Makefile.mk	/^SRC = main.c$/;"	m
SRC_BNS_DIR	Makefile	/^SRC_BNS_DIR	= srcs_bonus$/;"	m
SRC_DIR	Makefile	/^SRC_DIR		= srcs$/;"	m
SRC_GNL	libft/Makefile	/^SRC_GNL = get_next_line.c get_next_line_utils.c$/;"	m
SRC_LIBFT	libft/Makefile	/^SRC_LIBFT = ft_atoi.c ft_bzero.c ft_calloc.c ft_isalnum.c ft_isalpha.c ft_isascii.c \\$/;"	m
SRC_PRINTF	libft/Makefile	/^SRC_PRINTF = ft_convert.c ft_printf.c ft_put_add.c \\$/;"	m
START_ANGLE	includes/cub3d.h	/^# define START_ANGLE /;"	d
START_ANGLE	includes/cub3d_bonus.h	/^# define START_ANGLE /;"	d
STORING	mlx/man/man1/mlx_new_image.1	/^.SH STORING COLOR INSIDE IMAGES$/;"	s	title:MiniLibX
STORING	mlx/man/man3/mlx_new_image.3	/^.SH STORING COLOR INSIDE IMAGES$/;"	s	title:MiniLibX
SYNOPSYS	mlx/man/man1/mlx.1	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	mlx/man/man1/mlx_loop.1	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	mlx/man/man1/mlx_new_image.1	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	mlx/man/man1/mlx_new_window.1	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	mlx/man/man1/mlx_pixel_put.1	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	mlx/man/man3/mlx.3	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	mlx/man/man3/mlx_loop.3	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	mlx/man/man3/mlx_new_image.3	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	mlx/man/man3/mlx_new_window.3	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	mlx/man/man3/mlx_pixel_put.3	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
UNAME	mlx/Makefile.mk	/^UNAME = $(shell uname)$/;"	m
UNAME	mlx/test/Makefile.mk	/^UNAME := $(shell uname)$/;"	m
W	includes/cub3d.h	/^	W$/;"	e	enum:s_dir
W	includes/cub3d_bonus.h	/^	W$/;"	e	enum:s_dir
WALL_BUFF	includes/cub3d.h	/^# define WALL_BUFF /;"	d
WALL_BUFF	includes/cub3d_bonus.h	/^# define WALL_BUFF /;"	d
WARN_SHM_ATTACH	mlx/mlx_int.h	/^# define WARN_SHM_ATTACH /;"	d
WHITE	Makefile	/^WHITE 	= \\033[1;37m$/;"	m
WHITE	includes/cub3d.h	/^# define WHITE /;"	d
WHITE	includes/cub3d_bonus.h	/^# define WHITE /;"	d
WHITE	libft/Makefile	/^WHITE 	= \\033[1;37m$/;"	m
WIN1_SX	mlx/test/main.c	/^#define	WIN1_SX	/;"	d	file:
WIN1_SY	mlx/test/main.c	/^#define	WIN1_SY	/;"	d	file:
X-WINDOW	mlx/man/man1/mlx.1	/^.SH X-WINDOW CONCEPT$/;"	s	title:MiniLibX
X-WINDOW	mlx/man/man1/mlx_loop.1	/^.SH X-WINDOW EVENTS$/;"	s	title:MiniLibX
X-WINDOW	mlx/man/man3/mlx.3	/^.SH X-WINDOW CONCEPT$/;"	s	title:MiniLibX
X-WINDOW	mlx/man/man3/mlx_loop.3	/^.SH X-WINDOW EVENTS$/;"	s	title:MiniLibX
XPM	mlx/man/man1/mlx_new_image.1	/^.SH XPM IMAGES$/;"	s	title:MiniLibX
XPM	mlx/man/man3/mlx_new_image.3	/^.SH XPM IMAGES$/;"	s	title:MiniLibX
X_ShmAttach	mlx/mlx_new_image.c	/^#define	X_ShmAttach	/;"	d	file:
YELLOW	Makefile	/^YELLOW 	= \\033[1;33m$/;"	m
YELLOW	libft/Makefile	/^YELLOW 	= \\033[1;33m$/;"	m
a	includes/cub3d.h	/^	bool	a;$/;"	m	struct:s_keys	typeref:typename:bool
a	includes/cub3d.h	/^	t_point	a;$/;"	m	struct:s_calc	typeref:typename:t_point
a	includes/cub3d_bonus.h	/^	bool	a;$/;"	m	struct:s_keys	typeref:typename:bool
a	includes/cub3d_bonus.h	/^	t_point	a;$/;"	m	struct:s_calc	typeref:typename:t_point
addr	includes/cub3d.h	/^	char	*addr;$/;"	m	struct:s_img	typeref:typename:char *
addr	includes/cub3d_bonus.h	/^	char	*addr;$/;"	m	struct:s_img	typeref:typename:char *
all	Makefile	/^all: $(NAME)$/;"	t
all	libft/Makefile	/^all: $(NAME)$/;"	t
all	mlx/Makefile	/^all	: do_configure$/;"	t
all	mlx/Makefile.mk	/^all	: $(NAME)$/;"	t
all	mlx/test/Makefile.mk	/^all: $(NAME)$/;"	t
all_textures_and_colors_set	srcs/parser/parser.c	/^static int	all_textures_and_colors_set(t_game *game)$/;"	f	typeref:typename:int	file:
all_textures_and_colors_set	srcs_bonus/parser/parser.c	/^static int	all_textures_and_colors_set(t_game *game)$/;"	f	typeref:typename:int	file:
alpha	includes/cub3d.h	/^	float			alpha;$/;"	m	struct:s_game	typeref:typename:float
alpha	includes/cub3d_bonus.h	/^	float			alpha;$/;"	m	struct:s_game	typeref:typename:float
at_exit	mlx/test/run_tests.sh	/^at_exit() {$/;"	f
b	includes/cub3d.h	/^	t_point	b;$/;"	m	struct:s_calc	typeref:typename:t_point
b	includes/cub3d_bonus.h	/^	t_point	b;$/;"	m	struct:s_calc	typeref:typename:t_point
back_wall	includes/cub3d.h	/^	int				back_wall;$/;"	m	struct:s_game	typeref:typename:int
back_wall	includes/cub3d_bonus.h	/^	int				back_wall;$/;"	m	struct:s_game	typeref:typename:int
bonus	Makefile	/^bonus: $(NAME_BNS)$/;"	t
bpp	includes/cub3d.h	/^	int		bpp;$/;"	m	struct:s_img	typeref:typename:int
bpp	includes/cub3d_bonus.h	/^	int		bpp;$/;"	m	struct:s_img	typeref:typename:int
bpp	mlx/mlx_int.h	/^	int				bpp;$/;"	m	struct:s_img	typeref:typename:int
bpp1	mlx/test/main.c	/^int	bpp1;$/;"	v	typeref:typename:int
bpp2	mlx/test/main.c	/^int	bpp2;$/;"	v	typeref:typename:int
bpp3	mlx/test/main.c	/^int	bpp3;$/;"	v	typeref:typename:int
bpp4	mlx/test/main.c	/^int	bpp4;$/;"	v	typeref:typename:int
bresenham_def	srcs/draw_line.c	/^static void	bresenham_def(t_bresenham *param, t_point_int *a, t_point_int *b)$/;"	f	typeref:typename:void	file:
bresenham_def	srcs_bonus/draw_line.c	/^static void	bresenham_def(t_bresenham *param, t_point_int *a, t_point_int *b)$/;"	f	typeref:typename:void	file:
c_color	includes/cub3d.h	/^	int		c_color;$/;"	m	struct:s_input	typeref:typename:int
c_color	includes/cub3d_bonus.h	/^	int		c_color;$/;"	m	struct:s_input	typeref:typename:int
calc	includes/cub3d.h	/^	t_calc			*calc;$/;"	m	struct:s_game	typeref:typename:t_calc *
calc	includes/cub3d_bonus.h	/^	t_calc			*calc;$/;"	m	struct:s_game	typeref:typename:t_calc *
check	mlx/Makefile.mk	/^check: all$/;"	t
check_edges_content	srcs/parser/check_map.c	/^static void	check_edges_content(t_game *game, char cell)$/;"	f	typeref:typename:void	file:
check_edges_content	srcs_bonus/parser/check_map.c	/^static void	check_edges_content(t_game *game, char cell)$/;"	f	typeref:typename:void	file:
check_file_extension	srcs/parser/parse_texture.c	/^static void	check_file_extension(t_game *game, char *path)$/;"	f	typeref:typename:void	file:
check_file_extension	srcs_bonus/parser/parse_texture.c	/^static void	check_file_extension(t_game *game, char *path)$/;"	f	typeref:typename:void	file:
check_map	srcs/parser/check_map.c	/^void	check_map(t_game *game)$/;"	f	typeref:typename:void
check_map	srcs_bonus/parser/check_map.c	/^void	check_map(t_game *game)$/;"	f	typeref:typename:void
check_neighbours	srcs/parser/check_map.c	/^static void	check_neighbours(char **map, int row, int col, t_game *game)$/;"	f	typeref:typename:void	file:
check_neighbours	srcs_bonus/parser/check_map.c	/^static void	check_neighbours(char **map, int row, int col, t_game *game)$/;"	f	typeref:typename:void	file:
clean	Makefile	/^clean:$/;"	t
clean	libft/Makefile	/^clean:$/;"	t
clean	mlx/Makefile	/^clean	:$/;"	t
clean	mlx/Makefile.mk	/^clean	:$/;"	t
clean	mlx/configure	/^clean(){$/;"	f
clean	mlx/test/Makefile.mk	/^clean:$/;"	t
cmap	mlx/mlx_int.h	/^	Colormap	cmap;$/;"	m	struct:s_xvar	typeref:typename:Colormap
col	mlx/mlx_int.h	/^	int		col;$/;"	m	struct:s_xpm_col	typeref:typename:int
color	includes/cub3d.h	/^	int	color;$/;"	m	struct:s_square	typeref:typename:int
color	includes/cub3d_bonus.h	/^	int	color;$/;"	m	struct:s_square	typeref:typename:int
color	mlx/mlx_int.h	/^	int		color;$/;"	m	struct:s_col_name	typeref:typename:int
color_map_1	mlx/test/main.c	/^int	color_map_1(void *win,int w,int h)$/;"	f	typeref:typename:int
color_map_2	mlx/test/main.c	/^int	color_map_2(unsigned char *data,int bpp,int sl,int w,int h,int endian, int type)$/;"	f	typeref:typename:int
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list	typeref:typename:void *
copy_row	srcs/parser/parse_map.c	/^static void	copy_row(t_game *game, char *line, int row)$/;"	f	typeref:typename:void	file:
copy_row	srcs_bonus/parser/parse_map.c	/^static void	copy_row(t_game *game, char *line, int row)$/;"	f	typeref:typename:void	file:
count	libft/ft_itoa.c	/^static int	count(int n)$/;"	f	typeref:typename:int	file:
count_words	libft/ft_split.c	/^static int	count_words(const char *s, char delim)$/;"	f	typeref:typename:int	file:
d	includes/cub3d.h	/^	bool	d;$/;"	m	struct:s_keys	typeref:typename:bool
d	includes/cub3d_bonus.h	/^	bool	d;$/;"	m	struct:s_keys	typeref:typename:bool
d_proj_plane	includes/cub3d.h	/^	float			d_proj_plane;$/;"	m	struct:s_game	typeref:typename:float
d_proj_plane	includes/cub3d_bonus.h	/^	float			d_proj_plane;$/;"	m	struct:s_game	typeref:typename:float
data	mlx/mlx_int.h	/^	char			*data;$/;"	m	struct:s_img	typeref:typename:char *
data1	mlx/test/main.c	/^char	*data1;$/;"	v	typeref:typename:char *
data2	mlx/test/main.c	/^char	*data2;$/;"	v	typeref:typename:char *
data3	mlx/test/main.c	/^char	*data3;$/;"	v	typeref:typename:char *
data4	mlx/test/main.c	/^char	*data4;$/;"	v	typeref:typename:char *
decrgb	mlx/mlx_int.h	/^	int			decrgb[6];$/;"	m	struct:s_xvar	typeref:typename:int[6]
depth	mlx/mlx_int.h	/^	int			depth;$/;"	m	struct:s_xvar	typeref:typename:int
destroy_game	srcs/clean.c	/^void	destroy_game(t_game *game)$/;"	f	typeref:typename:void
destroy_game	srcs_bonus/clean.c	/^void	destroy_game(t_game *game)$/;"	f	typeref:typename:void
destroy_sprites	srcs/clean.c	/^void	destroy_sprites(t_game *game)$/;"	f	typeref:typename:void
destroy_sprites	srcs_bonus/clean.c	/^void	destroy_sprites(t_game *game)$/;"	f	typeref:typename:void
display	mlx/mlx_int.h	/^	Display		*display;$/;"	m	struct:s_xvar	typeref:typename:Display *
do_configure	mlx/Makefile	/^do_configure	:$/;"	t
do_flush	mlx/mlx_int.h	/^	int			do_flush;$/;"	m	struct:s_xvar	typeref:typename:int
draw_background	srcs/textures.c	/^void	draw_background(t_game *game)$/;"	f	typeref:typename:void
draw_background	srcs_bonus/textures.c	/^void	draw_background(t_game *game)$/;"	f	typeref:typename:void
draw_column	srcs/textures.c	/^void	draw_column(t_game *g, int x, float y_btm, float wall_h)$/;"	f	typeref:typename:void
draw_column	srcs_bonus/textures.c	/^void	draw_column(t_game *g, int x, float y_btm, float wall_h)$/;"	f	typeref:typename:void
draw_line	srcs/draw_line.c	/^void	draw_line(t_img *img, t_point_int *a, t_point_int *b, int color)$/;"	f	typeref:typename:void
draw_line	srcs_bonus/draw_line.c	/^void	draw_line(t_img *img, t_point_int *a, t_point_int *b, int color)$/;"	f	typeref:typename:void
draw_minimap	srcs_bonus/minimap_bonus.c	/^void	draw_minimap(t_game *g)$/;"	f	typeref:typename:void
draw_offset_x	includes/cub3d.h	/^	float			draw_offset_x;$/;"	m	struct:s_game	typeref:typename:float
draw_offset_x	includes/cub3d_bonus.h	/^	float			draw_offset_x;$/;"	m	struct:s_game	typeref:typename:float
draw_offset_y	includes/cub3d.h	/^	float			draw_offset_y;$/;"	m	struct:s_game	typeref:typename:float
draw_offset_y	includes/cub3d_bonus.h	/^	float			draw_offset_y;$/;"	m	struct:s_game	typeref:typename:float
draw_square	srcs_bonus/minimap_bonus.c	/^static void	draw_square(t_game *g, t_point_int point, int size, int color)$/;"	f	typeref:typename:void	file:
draw_wall	srcs/draw_wall.c	/^int	draw_wall(t_game *g)$/;"	f	typeref:typename:int
draw_wall	srcs_bonus/draw_wall.c	/^int	draw_wall(t_game *g)$/;"	f	typeref:typename:int
draw_wall_assist	srcs/draw_wall.c	/^void	draw_wall_assist(t_game *g, int x)$/;"	f	typeref:typename:void
draw_wall_assist	srcs_bonus/draw_wall.c	/^void	draw_wall_assist(t_game *g, int x)$/;"	f	typeref:typename:void
dx	includes/cub3d.h	/^	int	dx;$/;"	m	struct:s_bresenham	typeref:typename:int
dx	includes/cub3d_bonus.h	/^	int	dx;$/;"	m	struct:s_bresenham	typeref:typename:int
dy	includes/cub3d.h	/^	int	dy;$/;"	m	struct:s_bresenham	typeref:typename:int
dy	includes/cub3d_bonus.h	/^	int	dy;$/;"	m	struct:s_bresenham	typeref:typename:int
ea	includes/cub3d.h	/^	char	*ea;$/;"	m	struct:s_input	typeref:typename:char *
ea	includes/cub3d_bonus.h	/^	char	*ea;$/;"	m	struct:s_input	typeref:typename:char *
end_loop	mlx/mlx_int.h	/^	int 		end_loop;$/;"	m	struct:s_xvar	typeref:typename:int
endian	includes/cub3d.h	/^	int		endian;$/;"	m	struct:s_img	typeref:typename:int
endian	includes/cub3d_bonus.h	/^	int		endian;$/;"	m	struct:s_img	typeref:typename:int
endian1	mlx/test/main.c	/^int	endian1;$/;"	v	typeref:typename:int
endian2	mlx/test/main.c	/^int	endian2;$/;"	v	typeref:typename:int
endian3	mlx/test/main.c	/^int	endian3;$/;"	v	typeref:typename:int
endian4	mlx/test/main.c	/^int	endian4;$/;"	v	typeref:typename:int
err	includes/cub3d.h	/^	int	err;$/;"	m	struct:s_bresenham	typeref:typename:int
err	includes/cub3d_bonus.h	/^	int	err;$/;"	m	struct:s_bresenham	typeref:typename:int
error_msg	srcs/clean.c	/^void	error_msg(t_game *game, char *msg)$/;"	f	typeref:typename:void
error_msg	srcs_bonus/clean.c	/^void	error_msg(t_game *game, char *msg)$/;"	f	typeref:typename:void
expose_hook	mlx/mlx_int.h	/^	int					(*expose_hook)();$/;"	m	struct:s_win_list	typeref:typename:int (*)()
expose_param	mlx/mlx_int.h	/^	void				*expose_param;$/;"	m	struct:s_win_list	typeref:typename:void *
expose_win1	mlx/test/main.c	/^int	expose_win1(void *p)$/;"	f	typeref:typename:int
expose_win2	mlx/test/main.c	/^int	expose_win2(void *p)$/;"	f	typeref:typename:int
f_color	includes/cub3d.h	/^	int		f_color;$/;"	m	struct:s_input	typeref:typename:int
f_color	includes/cub3d_bonus.h	/^	int		f_color;$/;"	m	struct:s_input	typeref:typename:int
facing_down	srcs/utils.c	/^bool	facing_down(float angle)$/;"	f	typeref:typename:bool
facing_down	srcs_bonus/utils.c	/^bool	facing_down(float angle)$/;"	f	typeref:typename:bool
facing_left	srcs/utils.c	/^bool	facing_left(float angle, float buffer)$/;"	f	typeref:typename:bool
facing_left	srcs_bonus/utils.c	/^bool	facing_left(float angle, float buffer)$/;"	f	typeref:typename:bool
facing_right	srcs/utils.c	/^bool	facing_right(float angle, float buffer)$/;"	f	typeref:typename:bool
facing_right	srcs_bonus/utils.c	/^bool	facing_right(float angle, float buffer)$/;"	f	typeref:typename:bool
facing_up	srcs/utils.c	/^bool	facing_up(float angle)$/;"	f	typeref:typename:bool
facing_up	srcs_bonus/utils.c	/^bool	facing_up(float angle)$/;"	f	typeref:typename:bool
fclean	Makefile	/^fclean: clean$/;"	t
fclean	libft/Makefile	/^fclean: clean$/;"	t
fd	includes/cub3d.h	/^	int				fd;$/;"	m	struct:s_game	typeref:typename:int
fd	includes/cub3d_bonus.h	/^	int				fd;$/;"	m	struct:s_game	typeref:typename:int
fill_map	srcs/parser/parse_map.c	/^static void	fill_map(t_game *game, int *row, int *start_map)$/;"	f	typeref:typename:void	file:
fill_map	srcs_bonus/parser/parse_map.c	/^static void	fill_map(t_game *game, int *row, int *start_map)$/;"	f	typeref:typename:void	file:
fill_map_init	srcs/parser/parse_map.c	/^static void	fill_map_init(t_game *game, char *file)$/;"	f	typeref:typename:void	file:
fill_map_init	srcs_bonus/parser/parse_map.c	/^static void	fill_map_init(t_game *game, char *file)$/;"	f	typeref:typename:void	file:
find_collision_h	srcs/raycasting.c	/^float	find_collision_h(t_game *g, t_calc *calc, t_point p, float correct)$/;"	f	typeref:typename:float
find_collision_h	srcs_bonus/raycasting.c	/^float	find_collision_h(t_game *g, t_calc *calc, t_point p, float correct)$/;"	f	typeref:typename:float
find_collision_v	srcs/raycasting.c	/^float	find_collision_v(t_game *g, t_calc *calc, t_point p, float correct)$/;"	f	typeref:typename:float
find_collision_v	srcs_bonus/raycasting.c	/^float	find_collision_v(t_game *g, t_calc *calc, t_point p, float correct)$/;"	f	typeref:typename:float
fisheye_correction	srcs/draw_wall.c	/^float	fisheye_correction(float pa, float ra)$/;"	f	typeref:typename:float
fisheye_correction	srcs_bonus/draw_wall.c	/^float	fisheye_correction(float pa, float ra)$/;"	f	typeref:typename:float
format	mlx/mlx_int.h	/^	int				format;$/;"	m	struct:s_img	typeref:typename:int
free_line_end_game	srcs/parser/set_map_limits.c	/^void	free_line_end_game(t_game *game, char *line, char *msg)$/;"	f	typeref:typename:void
free_line_end_game	srcs_bonus/parser/set_map_limits.c	/^void	free_line_end_game(t_game *game, char *line, char *msg)$/;"	f	typeref:typename:void
free_matrix	libft/free_matrix.c	/^void	free_matrix(char **bytes)$/;"	f	typeref:typename:void
free_partial_map	srcs/parser/parse_map_utils.c	/^void	free_partial_map(t_game *game, int rows_allocated)$/;"	f	typeref:typename:void
free_partial_map	srcs_bonus/parser/parse_map_utils.c	/^void	free_partial_map(t_game *game, int rows_allocated)$/;"	f	typeref:typename:void
front_back_move	srcs/movement.c	/^void	front_back_move(t_game *g)$/;"	f	typeref:typename:void
front_back_move	srcs_bonus/movement.c	/^void	front_back_move(t_game *g)$/;"	f	typeref:typename:void
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f	typeref:typename:int
ft_atol	libft/ft_atol.c	/^long	ft_atol(char *str)$/;"	f	typeref:typename:long
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f	typeref:typename:void
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t nitems, size_t size)$/;"	f	typeref:typename:void *
ft_convert	libft/ft_convert.c	/^int	ft_convert(char format, va_list args)$/;"	f	typeref:typename:int
ft_count_words	libft/ft_count_words.c	/^int	ft_count_words(char *str)$/;"	f	typeref:typename:int
ft_get_line	libft/get_next_line_utils.c	/^char	*ft_get_line(char *text)$/;"	f	typeref:typename:char *
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f	typeref:typename:int
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f	typeref:typename:int
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f	typeref:typename:int
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f	typeref:typename:int
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f	typeref:typename:int
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstclear	libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f	typeref:typename:void
ft_lstlast	libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f	typeref:typename:t_list *
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f	typeref:typename:t_list *
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f	typeref:typename:t_list *
ft_lstsize	libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f	typeref:typename:int
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f	typeref:typename:int
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_printf	libft/ft_printf.c	/^int	ft_printf(const char *str, ...)$/;"	f	typeref:typename:int
ft_printnumb	libft/ft_putnbr_rec.c	/^static void	ft_printnumb(int x, int *count)$/;"	f	typeref:typename:void	file:
ft_printnumb	libft/ft_putnbr_unsig.c	/^static void	ft_printnumb(unsigned int x, int *count)$/;"	f	typeref:typename:void	file:
ft_put_add	libft/ft_put_add.c	/^int	ft_put_add(unsigned long int n)$/;"	f	typeref:typename:int
ft_putchar_2	libft/ft_putchar_2.c	/^int	ft_putchar_2(char c)$/;"	f	typeref:typename:int
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f	typeref:typename:void
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f	typeref:typename:void
ft_putnbr_hex	libft/ft_putnbr_hex.c	/^int	ft_putnbr_hex(unsigned int n)$/;"	f	typeref:typename:int
ft_putnbr_rec	libft/ft_putnbr_rec.c	/^int	ft_putnbr_rec(int nb)$/;"	f	typeref:typename:int
ft_putnbr_unsig	libft/ft_putnbr_unsig.c	/^int	ft_putnbr_unsig(unsigned int nb)$/;"	f	typeref:typename:int
ft_putnbr_uphex	libft/ft_putnbr_uphex.c	/^int	ft_putnbr_uphex(unsigned int n)$/;"	f	typeref:typename:int
ft_putstr_2	libft/ft_putstr_2.c	/^int	ft_putstr_2(char *s)$/;"	f	typeref:typename:int
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_split	libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f	typeref:typename:char **
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *str, int c)$/;"	f	typeref:typename:char *
ft_strcmp	libft/ft_strcmp.c	/^int	ft_strcmp(char *s1, char *s2)$/;"	f	typeref:typename:int
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s)$/;"	f	typeref:typename:char *
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f	typeref:typename:void
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char *s1, char *s2)$/;"	f	typeref:typename:char *
ft_strjoin_gnl	libft/get_next_line_utils.c	/^char	*ft_strjoin_gnl(char *s1, char *s2)$/;"	f	typeref:typename:char *
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *str)$/;"	f	typeref:typename:size_t
ft_strlen_2d	libft/ft_strlen_2d.c	/^size_t	ft_strlen_2d(char **s)$/;"	f	typeref:typename:size_t
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f	typeref:typename:char *
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f	typeref:typename:int
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f	typeref:typename:char *
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *str, int c)$/;"	f	typeref:typename:char *
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char *s1, char *set)$/;"	f	typeref:typename:char *
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f	typeref:typename:int
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f	typeref:typename:int
gc	mlx/mlx_int.h	/^	GC					gc;$/;"	m	struct:s_win_list	typeref:typename:GC
gc	mlx/mlx_int.h	/^	GC				gc;$/;"	m	struct:s_img	typeref:typename:GC
gere_mouse	mlx/test/new_win.c	/^int gere_mouse(int x,int y,int button,void*toto)$/;"	f	typeref:typename:int
get_color_hex	srcs/parser/parse_color.c	/^static int	get_color_hex(int r, int g, int b)$/;"	f	typeref:typename:int	file:
get_color_hex	srcs_bonus/parser/parse_color.c	/^static int	get_color_hex(int r, int g, int b)$/;"	f	typeref:typename:int	file:
get_map_limits	srcs/parser/set_map_limits.c	/^void	get_map_limits(t_game *game)$/;"	f	typeref:typename:void
get_map_limits	srcs_bonus/parser/set_map_limits.c	/^void	get_map_limits(t_game *game)$/;"	f	typeref:typename:void
get_map_size	srcs/parser/parse_map_utils.c	/^void	get_map_size(t_game *game, char *line)$/;"	f	typeref:typename:void
get_map_size	srcs_bonus/parser/parse_map_utils.c	/^void	get_map_size(t_game *game, char *line)$/;"	f	typeref:typename:void
get_next_line	libft/get_next_line.c	/^char	*get_next_line(int fd)$/;"	f	typeref:typename:char *
get_texture_color	srcs/textures.c	/^int	get_texture_color(t_game *g, t_img *tex, int pixel_x, int pixel_y)$/;"	f	typeref:typename:int
get_texture_color	srcs_bonus/textures.c	/^int	get_texture_color(t_game *g, t_img *tex, int pixel_x, int pixel_y)$/;"	f	typeref:typename:int
get_xa	srcs/raycast_utils.c	/^float	get_xa(float alpha)$/;"	f	typeref:typename:float
get_xa	srcs_bonus/raycast_utils.c	/^float	get_xa(float alpha)$/;"	f	typeref:typename:float
get_xlib_include_path	mlx/configure	/^get_xlib_include_path(){$/;"	f
get_ya	srcs/raycast_utils.c	/^float	get_ya(float alpha)$/;"	f	typeref:typename:float
get_ya	srcs_bonus/raycast_utils.c	/^float	get_ya(float alpha)$/;"	f	typeref:typename:float
handle_keypress	srcs/move_utils.c	/^int	handle_keypress(int keysym, t_game *g)$/;"	f	typeref:typename:int
handle_keypress	srcs_bonus/move_utils.c	/^int	handle_keypress(int keysym, t_game *g)$/;"	f	typeref:typename:int
handle_keyrelease	srcs/move_utils.c	/^int	handle_keyrelease(int keysym, t_game *g)$/;"	f	typeref:typename:int
handle_keyrelease	srcs_bonus/move_utils.c	/^int	handle_keyrelease(int keysym, t_game *g)$/;"	f	typeref:typename:int
height	includes/cub3d.h	/^	int		height;$/;"	m	struct:s_img	typeref:typename:int
height	includes/cub3d_bonus.h	/^	int		height;$/;"	m	struct:s_img	typeref:typename:int
height	mlx/mlx_int.h	/^	int				height;$/;"	m	struct:s_img	typeref:typename:int
hook	mlx/mlx_int.h	/^	int		(*hook)();$/;"	m	struct:s_event_list	typeref:typename:int (*)()
hooks	mlx/mlx_int.h	/^	t_event_list		hooks[MLX_MAX_EVENT];$/;"	m	struct:s_win_list	typeref:typename:t_event_list[]
im1	mlx/test/main.c	/^void    *im1;$/;"	v	typeref:typename:void *
im2	mlx/test/main.c	/^void	*im2;$/;"	v	typeref:typename:void *
im3	mlx/test/main.c	/^void	*im3;$/;"	v	typeref:typename:void *
im4	mlx/test/main.c	/^void	*im4;$/;"	v	typeref:typename:void *
image	mlx/mlx_int.h	/^	XImage			*image;$/;"	m	struct:s_img	typeref:typename:XImage *
img	includes/cub3d.h	/^	t_img			img;$/;"	m	struct:s_game	typeref:typename:t_img
img	includes/cub3d.h	/^	void	*img;$/;"	m	struct:s_img	typeref:typename:void *
img	includes/cub3d_bonus.h	/^	t_img			img;$/;"	m	struct:s_game	typeref:typename:t_img
img	includes/cub3d_bonus.h	/^	void	*img;$/;"	m	struct:s_img	typeref:typename:void *
init_graphics	srcs/init.c	/^void	init_graphics(t_game *game)$/;"	f	typeref:typename:void
init_graphics	srcs_bonus/init.c	/^void	init_graphics(t_game *game)$/;"	f	typeref:typename:void
init_input	srcs/init.c	/^void	init_input(t_input *input)$/;"	f	typeref:typename:void
init_input	srcs_bonus/init.c	/^void	init_input(t_input *input)$/;"	f	typeref:typename:void
init_player	srcs/init.c	/^void	init_player(t_game *g)$/;"	f	typeref:typename:void
init_player	srcs_bonus/init.c	/^void	init_player(t_game *g)$/;"	f	typeref:typename:void
input	includes/cub3d.h	/^	t_input			*input;$/;"	m	struct:s_game	typeref:typename:t_input *
input	includes/cub3d_bonus.h	/^	t_input			*input;$/;"	m	struct:s_game	typeref:typename:t_input *
into_array	libft/ft_itoa.c	/^static char	*into_array(int size, int sign, int n)$/;"	f	typeref:typename:char *	file:
into_array	libft/ft_putnbr_fd.c	/^static void	into_array(int n_digit, int n, int fd)$/;"	f	typeref:typename:void	file:
inv	libft/ft_putnbr_fd.c	/^static void	inv(int *ptr, int fd)$/;"	f	typeref:typename:void	file:
is_edge	srcs/parser/check_map.c	/^static bool	is_edge(int row, int col, t_game *game)$/;"	f	typeref:typename:bool	file:
is_edge	srcs_bonus/parser/check_map.c	/^static bool	is_edge(int row, int col, t_game *game)$/;"	f	typeref:typename:bool	file:
is_empty_corner	srcs/move_utils.c	/^bool	is_empty_corner(t_game *g, float dir_x, float dir_y, float angle)$/;"	f	typeref:typename:bool
is_empty_corner	srcs_bonus/move_utils.c	/^bool	is_empty_corner(t_game *g, float dir_x, float dir_y, float angle)$/;"	f	typeref:typename:bool
is_empty_line	srcs/parser/parser.c	/^bool	is_empty_line(char *line)$/;"	f	typeref:typename:bool
is_empty_line	srcs_bonus/parser/parser.c	/^bool	is_empty_line(char *line)$/;"	f	typeref:typename:bool
is_space	libft/is_space.c	/^int	is_space(char c)$/;"	f	typeref:typename:int
is_texture_duplicate	srcs/parser/parse_texture.c	/^static bool	is_texture_duplicate(t_game *game, t_dir dir)$/;"	f	typeref:typename:bool	file:
is_texture_duplicate	srcs_bonus/parser/parse_texture.c	/^static bool	is_texture_duplicate(t_game *game, t_dir dir)$/;"	f	typeref:typename:bool	file:
is_valid_char	srcs/parser/parse_map_utils.c	/^bool	is_valid_char(t_game *game, char c)$/;"	f	typeref:typename:bool
is_valid_char	srcs_bonus/parser/parse_map_utils.c	/^bool	is_valid_char(t_game *game, char c)$/;"	f	typeref:typename:bool
is_valid_point	srcs/parser/check_map.c	/^static bool	is_valid_point(int row, int col, t_game *game)$/;"	f	typeref:typename:bool	file:
is_valid_point	srcs_bonus/parser/check_map.c	/^static bool	is_valid_point(int row, int col, t_game *game)$/;"	f	typeref:typename:bool	file:
is_wall	srcs/raycast_utils.c	/^bool	is_wall(t_game *g, int x, int y)$/;"	f	typeref:typename:bool
is_wall	srcs_bonus/raycast_utils.c	/^bool	is_wall(t_game *g, int x, int y)$/;"	f	typeref:typename:bool
key_hook	mlx/mlx_int.h	/^	int					(*key_hook)();$/;"	m	struct:s_win_list	typeref:typename:int (*)()
key_param	mlx/mlx_int.h	/^	void				*key_param;$/;"	m	struct:s_win_list	typeref:typename:void *
key_win1	mlx/test/main.c	/^int	key_win1(int key,void *p)$/;"	f	typeref:typename:int
key_win2	mlx/test/main.c	/^int	key_win2(int key,void *p)$/;"	f	typeref:typename:int
key_win3	mlx/test/main.c	/^int	key_win3(int key,void *p)$/;"	f	typeref:typename:int
keys	includes/cub3d.h	/^	t_keys			keys;$/;"	m	struct:s_game	typeref:typename:t_keys
keys	includes/cub3d_bonus.h	/^	t_keys			keys;$/;"	m	struct:s_game	typeref:typename:t_keys
l_a	includes/cub3d.h	/^	bool	l_a;$/;"	m	struct:s_keys	typeref:typename:bool
l_a	includes/cub3d_bonus.h	/^	bool	l_a;$/;"	m	struct:s_keys	typeref:typename:bool
l_bottom	includes/cub3d.h	/^	size_t			l_bottom;$/;"	m	struct:s_game	typeref:typename:size_t
l_bottom	includes/cub3d_bonus.h	/^	size_t			l_bottom;$/;"	m	struct:s_game	typeref:typename:size_t
l_left	includes/cub3d.h	/^	size_t			l_left;$/;"	m	struct:s_game	typeref:typename:size_t
l_left	includes/cub3d_bonus.h	/^	size_t			l_left;$/;"	m	struct:s_game	typeref:typename:size_t
l_right	includes/cub3d.h	/^	size_t			l_right;$/;"	m	struct:s_game	typeref:typename:size_t
l_right	includes/cub3d_bonus.h	/^	size_t			l_right;$/;"	m	struct:s_game	typeref:typename:size_t
l_top	includes/cub3d.h	/^	size_t			l_top;$/;"	m	struct:s_game	typeref:typename:size_t
l_top	includes/cub3d_bonus.h	/^	size_t			l_top;$/;"	m	struct:s_game	typeref:typename:size_t
line	includes/cub3d.h	/^	char			*line;$/;"	m	struct:s_game	typeref:typename:char *
line	includes/cub3d_bonus.h	/^	char			*line;$/;"	m	struct:s_game	typeref:typename:char *
line_length	includes/cub3d.h	/^	int		line_length;$/;"	m	struct:s_img	typeref:typename:int
line_length	includes/cub3d_bonus.h	/^	int		line_length;$/;"	m	struct:s_img	typeref:typename:int
line_tmp	includes/cub3d.h	/^	char			*line_tmp;$/;"	m	struct:s_game	typeref:typename:char *
line_tmp	includes/cub3d_bonus.h	/^	char			*line_tmp;$/;"	m	struct:s_game	typeref:typename:char *
load_sprites	srcs/init.c	/^void	load_sprites(t_game *g)$/;"	f	typeref:typename:void
load_sprites	srcs_bonus/init.c	/^void	load_sprites(t_game *g)$/;"	f	typeref:typename:void
local_endian	mlx/test/main.c	/^int	local_endian;$/;"	v	typeref:typename:int
log_error	mlx/configure	/^log_error(){$/;"	f
log_error	mlx/test/run_tests.sh	/^log_error(){$/;"	f
log_info	mlx/configure	/^log_info(){$/;"	f
log_info	mlx/test/run_tests.sh	/^log_info(){$/;"	f
logging	mlx/configure	/^logging(){$/;"	f
logging	mlx/test/run_tests.sh	/^logging(){$/;"	f
loop_hook	mlx/mlx_int.h	/^	int			(*loop_hook)();$/;"	m	struct:s_xvar	typeref:typename:int (*)()
loop_param	mlx/mlx_int.h	/^	void		*loop_param;$/;"	m	struct:s_xvar	typeref:typename:void *
main	mlx/configure	/^main(){$/;"	f
main	mlx/test/main.c	/^int	main()$/;"	f	typeref:typename:int
main	mlx/test/new_win.c	/^int main()$/;"	f	typeref:typename:int
main	mlx/test/run_tests.sh	/^main(){$/;"	f
main	srcs/main.c	/^int	main(int argc, char **argv)$/;"	f	typeref:typename:int
main	srcs_bonus/main.c	/^int	main(int argc, char **argv)$/;"	f	typeref:typename:int
map	includes/cub3d.h	/^	char			**map;$/;"	m	struct:s_game	typeref:typename:char **
map	includes/cub3d_bonus.h	/^	char			**map;$/;"	m	struct:s_game	typeref:typename:char **
map_cols	includes/cub3d.h	/^	int				map_cols;$/;"	m	struct:s_game	typeref:typename:int
map_cols	includes/cub3d_bonus.h	/^	int				map_cols;$/;"	m	struct:s_game	typeref:typename:int
map_limit_init	srcs/parser/set_map_limits.c	/^static void	map_limit_init(t_game *game)$/;"	f	typeref:typename:void	file:
map_limit_init	srcs_bonus/parser/set_map_limits.c	/^static void	map_limit_init(t_game *game)$/;"	f	typeref:typename:void	file:
map_rows	includes/cub3d.h	/^	int				map_rows;$/;"	m	struct:s_game	typeref:typename:int
map_rows	includes/cub3d_bonus.h	/^	int				map_rows;$/;"	m	struct:s_game	typeref:typename:int
mask	mlx/mlx_int.h	/^	int		mask;$/;"	m	struct:s_event_list	typeref:typename:int
mini_background	srcs_bonus/minimap_bonus.c	/^static void	mini_background(t_game *g, int offset)$/;"	f	typeref:typename:void	file:
mini_scale	includes/cub3d_bonus.h	/^	float			mini_scale;$/;"	m	struct:s_game	typeref:typename:float
mlx	includes/cub3d.h	/^	void			*mlx;$/;"	m	struct:s_game	typeref:typename:void *
mlx	includes/cub3d_bonus.h	/^	void			*mlx;$/;"	m	struct:s_game	typeref:typename:void *
mlx	mlx/test/main.c	/^void	*mlx;$/;"	v	typeref:typename:void *
mlx	mlx/test/new_win.c	/^void *mlx;$/;"	v	typeref:typename:void *
mlx_X_error	mlx/mlx_new_image.c	/^int	mlx_X_error;$/;"	v	typeref:typename:int
mlx_clear_window	mlx/mlx_clear_window.c	/^int		mlx_clear_window(t_xvar *xvar,t_win_list *win)$/;"	f	typeref:typename:int
mlx_col_name	mlx/mlx_rgb.c	/^struct s_col_name mlx_col_name[] =$/;"	v	typeref:struct:s_col_name[]
mlx_destroy_display	mlx/mlx_destroy_display.c	/^int	mlx_destroy_display(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_destroy_image	mlx/mlx_destroy_image.c	/^int	mlx_destroy_image(t_xvar *xvar, t_img *img)$/;"	f	typeref:typename:int
mlx_destroy_window	mlx/mlx_destroy_window.c	/^int	mlx_destroy_window(t_xvar *xvar,t_win_list *win)$/;"	f	typeref:typename:int
mlx_do_key_autorepeatoff	mlx/mlx_hook.c	/^int	mlx_do_key_autorepeatoff(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_do_key_autorepeaton	mlx/mlx_hook.c	/^int	mlx_do_key_autorepeaton(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_do_sync	mlx/mlx_hook.c	/^int	mlx_do_sync(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_expose_hook	mlx/mlx_expose_hook.c	/^int		mlx_expose_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f	typeref:typename:int
mlx_ext_fullscreen	mlx/mlx_ext_randr.c	/^int			mlx_ext_fullscreen(t_xvar *xvar, t_win_list *win, int fullscreen)$/;"	f	typeref:typename:int
mlx_flush_event	mlx/mlx_flush_event.c	/^int	mlx_flush_event(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_get_color_value	mlx/mlx_get_color_value.c	/^int             mlx_get_color_value(t_xvar *xvar,int color)$/;"	f	typeref:typename:int
mlx_get_data_addr	mlx/mlx_get_data_addr.c	/^char	*mlx_get_data_addr(t_img *img,int *bits_per_pixel,$/;"	f	typeref:typename:char *
mlx_get_screen_size	mlx/mlx_screen_size.c	/^int		mlx_get_screen_size(void *mlx_ptr, int *sizex, int *sizey)$/;"	f	typeref:typename:int
mlx_hook	mlx/mlx_hook.c	/^int	mlx_hook(t_win_list *win, int x_event, int x_mask, $/;"	f	typeref:typename:int
mlx_init	mlx/mlx_init.c	/^void	*mlx_init()$/;"	f	typeref:typename:void *
mlx_int_anti_resize_win	mlx/mlx_int_anti_resize_win.c	/^int	mlx_int_anti_resize_win(t_xvar *xvar,Window win,int w,int h)$/;"	f	typeref:typename:int
mlx_int_deal_shm	mlx/mlx_init.c	/^int		mlx_int_deal_shm(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_int_do_nothing	mlx/mlx_int_do_nothing.c	/^int	mlx_int_do_nothing(void *param)$/;"	f	typeref:typename:int
mlx_int_egal_img	mlx/mlx_lib_xpm.c	/^int	mlx_int_egal_img(XImage *img1,XImage *img2)$/;"	f	typeref:typename:int
mlx_int_file_get_rid_comment	mlx/mlx_xpm.c	/^int	mlx_int_file_get_rid_comment(char *ptr, int size)$/;"	f	typeref:typename:int
mlx_int_get_col_name	mlx/mlx_xpm.c	/^int	mlx_int_get_col_name(char *str,int size)$/;"	f	typeref:typename:int
mlx_int_get_good_color	mlx/mlx_get_color_value.c	/^int		mlx_int_get_good_color(t_xvar *xvar,int color)$/;"	f	typeref:typename:int
mlx_int_get_line	mlx/mlx_xpm.c	/^char	*mlx_int_get_line(char *ptr,int *pos,int size)$/;"	f	typeref:typename:char *
mlx_int_get_text_rgb	mlx/mlx_xpm.c	/^int	mlx_int_get_text_rgb(char *name, char *end)$/;"	f	typeref:typename:int
mlx_int_get_visual	mlx/mlx_int_get_visual.c	/^int		mlx_int_get_visual(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_int_new_image	mlx/mlx_new_image.c	/^void	*mlx_int_new_image(t_xvar *xvar,int width, int height,int format)$/;"	f	typeref:typename:void *
mlx_int_new_xshm_image	mlx/mlx_new_image.c	/^void	*mlx_int_new_xshm_image(t_xvar *xvar,int width,int height,int format)$/;"	f	typeref:typename:void *
mlx_int_param_ButtonPress	mlx/mlx_int_param_event.c	/^int	mlx_int_param_ButtonPress(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_ButtonRelease	mlx/mlx_int_param_event.c	/^int	mlx_int_param_ButtonRelease(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_Expose	mlx/mlx_int_param_event.c	/^int	mlx_int_param_Expose(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_KeyPress	mlx/mlx_int_param_event.c	/^int	mlx_int_param_KeyPress(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_KeyRelease	mlx/mlx_int_param_event.c	/^int	mlx_int_param_KeyRelease(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_MotionNotify	mlx/mlx_int_param_event.c	/^int	mlx_int_param_MotionNotify(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_event	mlx/mlx_int_param_event.c	/^int	(*(mlx_int_param_event[]))() =$/;"	v	typeref:typename:int (* ([]))()
mlx_int_param_generic	mlx/mlx_int_param_event.c	/^int	mlx_int_param_generic(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_undef	mlx/mlx_int_param_event.c	/^int	mlx_int_param_undef()$/;"	f	typeref:typename:int
mlx_int_parse_xpm	mlx/mlx_xpm.c	/^void	*mlx_int_parse_xpm(t_xvar *xvar,void *info,int info_size,char *(*f)())$/;"	f	typeref:typename:void *
mlx_int_rgb_conversion	mlx/mlx_init.c	/^int		mlx_int_rgb_conversion(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_int_set_win_event_mask	mlx/mlx_int_set_win_event_mask.c	/^int	mlx_int_set_win_event_mask(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_int_static_line	mlx/mlx_xpm.c	/^char	*mlx_int_static_line(char **xpm_data,int *pos,int size)$/;"	f	typeref:typename:char *
mlx_int_str_str	mlx/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str(char *str,char *find,int len)$/;"	f	typeref:typename:int
mlx_int_str_str_cote	mlx/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str_cote(char *str,char *find,int len)$/;"	f	typeref:typename:int
mlx_int_str_to_wordtab	mlx/mlx_int_str_to_wordtab.c	/^char	**mlx_int_str_to_wordtab(char *str)$/;"	f	typeref:typename:char **
mlx_int_wait_first_expose	mlx/mlx_int_wait_first_expose.c	/^int	mlx_int_wait_first_expose(t_xvar *xvar,Window win)$/;"	f	typeref:typename:int
mlx_int_xpm_f_image	mlx/mlx_lib_xpm.c	/^void		*mlx_int_xpm_f_image(t_xvar *xvar,int *width,int *height,$/;"	f	typeref:typename:void *
mlx_int_xpm_set_pixel	mlx/mlx_xpm.c	/^int	mlx_int_xpm_set_pixel(t_img *img, char *data, int opp, int col, int x)$/;"	f	typeref:typename:int
mlx_key_hook	mlx/mlx_key_hook.c	/^int		mlx_key_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f	typeref:typename:int
mlx_loop	mlx/mlx_loop.c	/^int			mlx_loop(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_loop_end	mlx/mlx_loop.c	/^int			mlx_loop_end(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_loop_hook	mlx/mlx_loop_hook.c	/^int	mlx_loop_hook(t_xvar *xvar,int (*funct)(),void *param)$/;"	f	typeref:typename:int
mlx_mouse_get_pos	mlx/mlx_mouse.c	/^int		mlx_mouse_get_pos(t_xvar *xvar, t_win_list *win, \\$/;"	f	typeref:typename:int
mlx_mouse_hide	mlx/mlx_mouse.c	/^int		mlx_mouse_hide(t_xvar *xvar, t_win_list *win)$/;"	f	typeref:typename:int
mlx_mouse_hook	mlx/mlx_mouse_hook.c	/^int		mlx_mouse_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f	typeref:typename:int
mlx_mouse_move	mlx/mlx_mouse.c	/^int		mlx_mouse_move(t_xvar *xvar, t_win_list *win, int x, int y)$/;"	f	typeref:typename:int
mlx_mouse_show	mlx/mlx_mouse.c	/^int		mlx_mouse_show(t_xvar *xvar, t_win_list *win)$/;"	f	typeref:typename:int
mlx_new_image	mlx/mlx_new_image.c	/^void	*mlx_new_image(t_xvar *xvar,int width, int height)$/;"	f	typeref:typename:void *
mlx_new_image2	mlx/mlx_new_image.c	/^void	*mlx_new_image2(t_xvar *xvar,int width, int height)$/;"	f	typeref:typename:void *
mlx_new_window	mlx/mlx_new_window.c	/^void	*mlx_new_window(t_xvar *xvar,int size_x,int size_y,char *title)$/;"	f	typeref:typename:void *
mlx_pixel_put	mlx/mlx_pixel_put.c	/^int		mlx_pixel_put(t_xvar *xvar,t_win_list *win,$/;"	f	typeref:typename:int
mlx_put_image_to_window	mlx/mlx_put_image_to_window.c	/^int	mlx_put_image_to_window(t_xvar *xvar,t_win_list *win,t_img *img,$/;"	f	typeref:typename:int
mlx_set_font	mlx/mlx_set_font.c	/^void	mlx_set_font(t_xvar *xvar, t_win_list *win, char *name)$/;"	f	typeref:typename:void
mlx_string_put	mlx/mlx_string_put.c	/^int		mlx_string_put(t_xvar *xvar,t_win_list *win,$/;"	f	typeref:typename:int
mlx_xpm_file_to_image	mlx/mlx_lib_xpm.c	/^void	*mlx_xpm_file_to_image(t_xvar *xvar,char *filename,$/;"	f	typeref:typename:void *
mlx_xpm_file_to_image	mlx/mlx_xpm.c	/^void	*mlx_xpm_file_to_image(t_xvar *xvar,char *file,int *width,int *height)$/;"	f	typeref:typename:void *
mlx_xpm_to_image	mlx/mlx_lib_xpm.c	/^void	*mlx_xpm_to_image(t_xvar *xvar,char **data,int *width,int *height)$/;"	f	typeref:typename:void *
mlx_xpm_to_image	mlx/mlx_xpm.c	/^void	*mlx_xpm_to_image(t_xvar *xvar,char **xpm_data,int *width,int *height)$/;"	f	typeref:typename:void *
mouse_hook	mlx/mlx_int.h	/^	int					(*mouse_hook)();$/;"	m	struct:s_win_list	typeref:typename:int (*)()
mouse_param	mlx/mlx_int.h	/^	void				*mouse_param;$/;"	m	struct:s_win_list	typeref:typename:void *
mouse_win1	mlx/test/main.c	/^int	mouse_win1(int button,int x,int y, void *p)$/;"	f	typeref:typename:int
mouse_win2	mlx/test/main.c	/^int	mouse_win2(int button,int x,int y, void *p)$/;"	f	typeref:typename:int
mouse_win3	mlx/test/main.c	/^int	mouse_win3(int x,int y, void *p)$/;"	f	typeref:typename:int
move_backwards	srcs/movement.c	/^void	move_backwards(t_game *g)$/;"	f	typeref:typename:void
move_backwards	srcs_bonus/movement.c	/^void	move_backwards(t_game *g)$/;"	f	typeref:typename:void
name	mlx/mlx_int.h	/^	char	*name;$/;"	m	struct:s_col_name	typeref:typename:char *
name	mlx/mlx_int.h	/^	int		name;$/;"	m	struct:s_xpm_col	typeref:typename:int
new_img	srcs/init.c	/^t_img	new_img(t_game *game)$/;"	f	typeref:typename:t_img
new_img	srcs_bonus/init.c	/^t_img	new_img(t_game *game)$/;"	f	typeref:typename:t_img
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list *
next	mlx/mlx_int.h	/^	struct s_win_list	*next;$/;"	m	struct:s_win_list	typeref:struct:s_win_list *
no	includes/cub3d.h	/^	char	*no;$/;"	m	struct:s_input	typeref:typename:char *
no	includes/cub3d_bonus.h	/^	char	*no;$/;"	m	struct:s_input	typeref:typename:char *
offset	includes/cub3d.h	/^	t_point	offset;$/;"	m	struct:s_calc	typeref:typename:t_point
offset	includes/cub3d_bonus.h	/^	t_point	offset;$/;"	m	struct:s_calc	typeref:typename:t_point
p_angle	includes/cub3d.h	/^	float			p_angle;$/;"	m	struct:s_game	typeref:typename:float
p_angle	includes/cub3d_bonus.h	/^	float			p_angle;$/;"	m	struct:s_game	typeref:typename:float
p_b_angle	includes/cub3d.h	/^	float			p_b_angle;$/;"	m	struct:s_game	typeref:typename:float
p_b_angle	includes/cub3d_bonus.h	/^	float			p_b_angle;$/;"	m	struct:s_game	typeref:typename:float
p_dir	includes/cub3d.h	/^	t_point			p_dir;$/;"	m	struct:s_game	typeref:typename:t_point
p_dir	includes/cub3d_bonus.h	/^	t_point			p_dir;$/;"	m	struct:s_game	typeref:typename:t_point
p_pos	includes/cub3d.h	/^	t_point			p_pos;$/;"	m	struct:s_game	typeref:typename:t_point
p_pos	includes/cub3d_bonus.h	/^	t_point			p_pos;$/;"	m	struct:s_game	typeref:typename:t_point
param	mlx/mlx_int.h	/^	void	*param;$/;"	m	struct:s_event_list	typeref:typename:void *
parse_args	mlx/configure	/^parse_args(){$/;"	f
parse_color	srcs/parser/parse_color.c	/^void	parse_color(t_game *game, char *line, t_color_type color_type)$/;"	f	typeref:typename:void
parse_color	srcs_bonus/parser/parse_color.c	/^void	parse_color(t_game *game, char *line, t_color_type color_type)$/;"	f	typeref:typename:void
parse_color_components	srcs/parser/parse_color.c	/^static void	parse_color_components(t_game *game, char *line, int *i, int *color)$/;"	f	typeref:typename:void	file:
parse_color_components	srcs_bonus/parser/parse_color.c	/^static void	parse_color_components(t_game *game, char *line, int *i, int *color)$/;"	f	typeref:typename:void	file:
parse_file	srcs/parser/parser.c	/^void	parse_file(t_game *game, char *file)$/;"	f	typeref:typename:void
parse_file	srcs_bonus/parser/parser.c	/^void	parse_file(t_game *game, char *file)$/;"	f	typeref:typename:void
parse_map	srcs/parser/parse_map.c	/^void	parse_map(t_game *game, char *file)$/;"	f	typeref:typename:void
parse_map	srcs_bonus/parser/parse_map.c	/^void	parse_map(t_game *game, char *file)$/;"	f	typeref:typename:void
parse_texture	srcs/parser/parse_texture.c	/^void	parse_texture(t_game *game, char *line, t_dir dir)$/;"	f	typeref:typename:void
parse_texture	srcs_bonus/parser/parse_texture.c	/^void	parse_texture(t_game *game, char *line, t_dir dir)$/;"	f	typeref:typename:void
parse_textures_and_colors	srcs/parser/parser.c	/^static void	parse_textures_and_colors(t_game *game, char *trim_line)$/;"	f	typeref:typename:void	file:
parse_textures_and_colors	srcs_bonus/parser/parser.c	/^static void	parse_textures_and_colors(t_game *game, char *trim_line)$/;"	f	typeref:typename:void	file:
pix	mlx/mlx_int.h	/^	Pixmap			pix;$/;"	m	struct:s_img	typeref:typename:Pixmap
player	includes/cub3d.h	/^	bool			player;$/;"	m	struct:s_game	typeref:typename:bool
player	includes/cub3d_bonus.h	/^	bool			player;$/;"	m	struct:s_game	typeref:typename:bool
private_cmap	mlx/mlx_int.h	/^	int			private_cmap;$/;"	m	struct:s_xvar	typeref:typename:int
process_line	srcs/parser/parse_map.c	/^static void	process_line(t_game *game, char *line, int *row, int *start_map)$/;"	f	typeref:typename:void	file:
process_line	srcs_bonus/parser/parse_map.c	/^static void	process_line(t_game *game, char *line, int *row, int *start_map)$/;"	f	typeref:typename:void	file:
pshm_format	mlx/mlx_int.h	/^	int			pshm_format;$/;"	m	struct:s_xvar	typeref:typename:int
put_pixel	srcs/draw_line.c	/^void	put_pixel(t_img *img, int x, int y, int color)$/;"	f	typeref:typename:void
put_pixel	srcs_bonus/draw_line.c	/^void	put_pixel(t_img *img, int x, int y, int color)$/;"	f	typeref:typename:void
quit_prog	srcs/clean.c	/^int	quit_prog(t_game *game)$/;"	f	typeref:typename:int
quit_prog	srcs_bonus/clean.c	/^int	quit_prog(t_game *game)$/;"	f	typeref:typename:int
r_a	includes/cub3d.h	/^	bool	r_a;$/;"	m	struct:s_keys	typeref:typename:bool
r_a	includes/cub3d_bonus.h	/^	bool	r_a;$/;"	m	struct:s_keys	typeref:typename:bool
re	Makefile	/^re: fclean all$/;"	t
re	libft/Makefile	/^re: fclean all$/;"	t
re	mlx/Makefile	/^re	: clean all$/;"	t
re	mlx/test/Makefile.mk	/^re: clean all$/;"	t
read_from	libft/get_next_line.c	/^char	*read_from(int fd, char *read_line)$/;"	f	typeref:typename:char *
remain_text	libft/get_next_line_utils.c	/^char	*remain_text(char *text)$/;"	f	typeref:typename:char *
render_movement	srcs/move_utils.c	/^int	render_movement(t_game *g)$/;"	f	typeref:typename:int
render_movement	srcs_bonus/move_utils.c	/^int	render_movement(t_game *g)$/;"	f	typeref:typename:int
right_texture	includes/cub3d.h	/^	t_img			*right_texture;$/;"	m	struct:s_game	typeref:typename:t_img *
right_texture	includes/cub3d_bonus.h	/^	t_img			*right_texture;$/;"	m	struct:s_game	typeref:typename:t_img *
root	mlx/mlx_int.h	/^	Window		root;$/;"	m	struct:s_xvar	typeref:typename:Window
rotate	srcs/movement.c	/^void	rotate(t_game *g)$/;"	f	typeref:typename:void
rotate	srcs_bonus/movement.c	/^void	rotate(t_game *g)$/;"	f	typeref:typename:void
route_lines	srcs/parser/parser.c	/^static void	route_lines(t_game *game, char *line)$/;"	f	typeref:typename:void	file:
route_lines	srcs_bonus/parser/parser.c	/^static void	route_lines(t_game *game, char *line)$/;"	f	typeref:typename:void	file:
s	includes/cub3d.h	/^	bool	s;$/;"	m	struct:s_keys	typeref:typename:bool
s	includes/cub3d_bonus.h	/^	bool	s;$/;"	m	struct:s_keys	typeref:typename:bool
s_bresenham	includes/cub3d.h	/^typedef struct s_bresenham$/;"	s
s_bresenham	includes/cub3d_bonus.h	/^typedef struct s_bresenham$/;"	s
s_calc	includes/cub3d.h	/^typedef struct s_calc$/;"	s
s_calc	includes/cub3d_bonus.h	/^typedef struct s_calc$/;"	s
s_col_name	mlx/mlx_int.h	/^struct	s_col_name$/;"	s
s_color_type	includes/cub3d.h	/^typedef enum s_color_type$/;"	g
s_color_type	includes/cub3d_bonus.h	/^typedef enum s_color_type$/;"	g
s_dir	includes/cub3d.h	/^typedef enum s_dir$/;"	g
s_dir	includes/cub3d_bonus.h	/^typedef enum s_dir$/;"	g
s_event_list	mlx/mlx_int.h	/^typedef struct	s_event_list$/;"	s
s_game	includes/cub3d.h	/^typedef struct s_game$/;"	s
s_game	includes/cub3d_bonus.h	/^typedef struct s_game$/;"	s
s_img	includes/cub3d.h	/^typedef struct s_img$/;"	s
s_img	includes/cub3d_bonus.h	/^typedef struct s_img$/;"	s
s_img	mlx/mlx_int.h	/^typedef struct	s_img$/;"	s
s_input	includes/cub3d.h	/^typedef struct s_input$/;"	s
s_input	includes/cub3d_bonus.h	/^typedef struct s_input$/;"	s
s_keys	includes/cub3d.h	/^typedef struct s_keys$/;"	s
s_keys	includes/cub3d_bonus.h	/^typedef struct s_keys$/;"	s
s_list	libft/libft.h	/^typedef struct s_list$/;"	s
s_point	includes/cub3d.h	/^typedef struct s_point$/;"	s
s_point	includes/cub3d_bonus.h	/^typedef struct s_point$/;"	s
s_point_int	includes/cub3d.h	/^typedef struct s_point_int$/;"	s
s_point_int	includes/cub3d_bonus.h	/^typedef struct s_point_int$/;"	s
s_square	includes/cub3d.h	/^typedef struct s_square$/;"	s
s_square	includes/cub3d_bonus.h	/^typedef struct s_square$/;"	s
s_win_list	mlx/mlx_int.h	/^typedef struct	s_win_list$/;"	s
s_xpm_col	mlx/mlx_int.h	/^typedef	struct	s_xpm_col$/;"	s
s_xvar	mlx/mlx_int.h	/^typedef struct	s_xvar$/;"	s
safe_malloc	srcs/parser/parse_map_utils.c	/^void	*safe_malloc(int bytes)$/;"	f	typeref:typename:void *
safe_malloc	srcs_bonus/parser/parse_map_utils.c	/^void	*safe_malloc(int bytes)$/;"	f	typeref:typename:void *
saved_mode	mlx/mlx_ext_randr.c	/^RRMode	saved_mode = 0;$/;"	v	typeref:typename:RRMode
screen	mlx/mlx_int.h	/^	int			screen;$/;"	m	struct:s_xvar	typeref:typename:int
set	includes/cub3d.h	/^	bool	set;$/;"	m	struct:s_calc	typeref:typename:bool
set	includes/cub3d_bonus.h	/^	bool	set;$/;"	m	struct:s_calc	typeref:typename:bool
set_angle	srcs/utils.c	/^float	set_angle(float angle)$/;"	f	typeref:typename:float
set_angle	srcs_bonus/utils.c	/^float	set_angle(float angle)$/;"	f	typeref:typename:float
set_back_wall	srcs/draw_wall.c	/^void	set_back_wall(t_game *g, float horizontal, float vertical)$/;"	f	typeref:typename:void
set_back_wall	srcs_bonus/draw_wall.c	/^void	set_back_wall(t_game *g, float horizontal, float vertical)$/;"	f	typeref:typename:void
set_horizontal_limits	srcs/parser/set_map_limits.c	/^static void	set_horizontal_limits(t_game *game, size_t j)$/;"	f	typeref:typename:void	file:
set_horizontal_limits	srcs_bonus/parser/set_map_limits.c	/^static void	set_horizontal_limits(t_game *game, size_t j)$/;"	f	typeref:typename:void	file:
set_player	srcs/parser/parse_map_utils.c	/^void	set_player(t_game *game, char c, int x, int y)$/;"	f	typeref:typename:void
set_player	srcs_bonus/parser/parse_map_utils.c	/^void	set_player(t_game *game, char c, int x, int y)$/;"	f	typeref:typename:void
set_player_direction	srcs/parser/parse_texture.c	/^static void	set_player_direction(t_game *game, char *path, t_dir dir)$/;"	f	typeref:typename:void	file:
set_player_direction	srcs_bonus/parser/parse_texture.c	/^static void	set_player_direction(t_game *game, char *path, t_dir dir)$/;"	f	typeref:typename:void	file:
set_scale_minimap	srcs_bonus/minimap_bonus.c	/^static void	set_scale_minimap(t_game *g)$/;"	f	typeref:typename:void	file:
set_texture	srcs/raycast_utils.c	/^void	set_texture(t_game *g, bool horiz)$/;"	f	typeref:typename:void
set_texture	srcs_bonus/raycast_utils.c	/^void	set_texture(t_game *g, bool horiz)$/;"	f	typeref:typename:void
set_vertical_limits	srcs/parser/set_map_limits.c	/^static void	set_vertical_limits(t_game *game, size_t i)$/;"	f	typeref:typename:void	file:
set_vertical_limits	srcs_bonus/parser/set_map_limits.c	/^static void	set_vertical_limits(t_game *game, size_t i)$/;"	f	typeref:typename:void	file:
set_wall_side	srcs/raycast_utils.c	/^void	set_wall_side(t_game *g, float horizontal, float vertical)$/;"	f	typeref:typename:void
set_wall_side	srcs_bonus/raycast_utils.c	/^void	set_wall_side(t_game *g, float horizontal, float vertical)$/;"	f	typeref:typename:void
shm	mlx/mlx_int.h	/^	XShmSegmentInfo	shm;$/;"	m	struct:s_img	typeref:typename:XShmSegmentInfo
shm_att_pb	mlx/mlx_new_image.c	/^int	shm_att_pb(Display *d,XErrorEvent *ev)$/;"	f	typeref:typename:int
shorter_distance	srcs/draw_wall.c	/^float	shorter_distance(t_game *g, float horiz, float vertical, bool p_ray)$/;"	f	typeref:typename:float
shorter_distance	srcs_bonus/draw_wall.c	/^float	shorter_distance(t_game *g, float horiz, float vertical, bool p_ray)$/;"	f	typeref:typename:float
show	mlx/Makefile.mk	/^show:$/;"	t
show	mlx/test/Makefile.mk	/^show:$/;"	t
show_help	mlx/configure	/^show_help(){$/;"	f
sideways_movement	srcs/movement.c	/^void	sideways_movement(t_game *g)$/;"	f	typeref:typename:void
sideways_movement	srcs_bonus/movement.c	/^void	sideways_movement(t_game *g)$/;"	f	typeref:typename:void
sigint_handler	mlx/test/run_tests.sh	/^sigint_handler(){$/;"	f
size	includes/cub3d.h	/^	int	size;$/;"	m	struct:s_square	typeref:typename:int
size	includes/cub3d_bonus.h	/^	int	size;$/;"	m	struct:s_square	typeref:typename:int
size_line	mlx/mlx_int.h	/^	int				size_line;$/;"	m	struct:s_img	typeref:typename:int
skip_word	libft/ft_split.c	/^static int	skip_word(const char *str, char c)$/;"	f	typeref:typename:int	file:
sl1	mlx/test/main.c	/^int	sl1;$/;"	v	typeref:typename:int
sl2	mlx/test/main.c	/^int	sl2;$/;"	v	typeref:typename:int
sl3	mlx/test/main.c	/^int	sl3;$/;"	v	typeref:typename:int
sl4	mlx/test/main.c	/^int	sl4;$/;"	v	typeref:typename:int
so	includes/cub3d.h	/^	char	*so;$/;"	m	struct:s_input	typeref:typename:char *
so	includes/cub3d_bonus.h	/^	char	*so;$/;"	m	struct:s_input	typeref:typename:char *
sprites	includes/cub3d.h	/^	t_img			*sprites;$/;"	m	struct:s_game	typeref:typename:t_img *
sprites	includes/cub3d_bonus.h	/^	t_img			*sprites;$/;"	m	struct:s_game	typeref:typename:t_img *
start_game	srcs/main.c	/^void	start_game(char	*file)$/;"	f	typeref:typename:void
start_game	srcs_bonus/main.c	/^void	start_game(char	*file)$/;"	f	typeref:typename:void
strlcpy_is_not_posix	mlx/mlx_xpm.c	/^unsigned int	strlcpy_is_not_posix(char *dest, char *src, unsigned int size)$/;"	f	typeref:typename:unsigned int
sx	includes/cub3d.h	/^	int	sx;$/;"	m	struct:s_bresenham	typeref:typename:int
sx	includes/cub3d_bonus.h	/^	int	sx;$/;"	m	struct:s_bresenham	typeref:typename:int
sy	includes/cub3d.h	/^	int	sy;$/;"	m	struct:s_bresenham	typeref:typename:int
sy	includes/cub3d_bonus.h	/^	int	sy;$/;"	m	struct:s_bresenham	typeref:typename:int
t_bresenham	includes/cub3d.h	/^}		t_bresenham;$/;"	t	typeref:struct:s_bresenham
t_bresenham	includes/cub3d_bonus.h	/^}		t_bresenham;$/;"	t	typeref:struct:s_bresenham
t_calc	includes/cub3d.h	/^}			t_calc;$/;"	t	typeref:struct:s_calc
t_calc	includes/cub3d_bonus.h	/^}			t_calc;$/;"	t	typeref:struct:s_calc
t_color_type	includes/cub3d.h	/^}			t_color_type;$/;"	t	typeref:enum:s_color_type
t_color_type	includes/cub3d_bonus.h	/^}			t_color_type;$/;"	t	typeref:enum:s_color_type
t_dir	includes/cub3d.h	/^}			t_dir;$/;"	t	typeref:enum:s_dir
t_dir	includes/cub3d_bonus.h	/^}			t_dir;$/;"	t	typeref:enum:s_dir
t_event_list	mlx/mlx_int.h	/^}				t_event_list;$/;"	t	typeref:struct:s_event_list
t_game	includes/cub3d.h	/^}					t_game;$/;"	t	typeref:struct:s_game
t_game	includes/cub3d_bonus.h	/^}					t_game;$/;"	t	typeref:struct:s_game
t_img	includes/cub3d.h	/^}				t_img;$/;"	t	typeref:struct:s_img
t_img	includes/cub3d_bonus.h	/^}				t_img;$/;"	t	typeref:struct:s_img
t_img	mlx/mlx_int.h	/^}				t_img;$/;"	t	typeref:struct:s_img
t_input	includes/cub3d.h	/^}				t_input;$/;"	t	typeref:struct:s_input
t_input	includes/cub3d_bonus.h	/^}				t_input;$/;"	t	typeref:struct:s_input
t_keys	includes/cub3d.h	/^}			t_keys;$/;"	t	typeref:struct:s_keys
t_keys	includes/cub3d_bonus.h	/^}			t_keys;$/;"	t	typeref:struct:s_keys
t_list	libft/libft.h	/^}				t_list;$/;"	t	typeref:struct:s_list
t_point	includes/cub3d.h	/^}					t_point;$/;"	t	typeref:struct:s_point
t_point	includes/cub3d_bonus.h	/^}					t_point;$/;"	t	typeref:struct:s_point
t_point_int	includes/cub3d.h	/^}					t_point_int;$/;"	t	typeref:struct:s_point_int
t_point_int	includes/cub3d_bonus.h	/^}					t_point_int;$/;"	t	typeref:struct:s_point_int
t_square	includes/cub3d.h	/^}				t_square;$/;"	t	typeref:struct:s_square
t_square	includes/cub3d_bonus.h	/^}				t_square;$/;"	t	typeref:struct:s_square
t_win_list	mlx/mlx_int.h	/^}				t_win_list;$/;"	t	typeref:struct:s_win_list
t_xpm_col	mlx/mlx_int.h	/^}				t_xpm_col;$/;"	t	typeref:struct:s_xpm_col
t_xvar	mlx/mlx_int.h	/^}				t_xvar;$/;"	t	typeref:struct:s_xvar
test	Makefile	/^test: $(NAME) $(OBJ)$/;"	t
test_bonus	Makefile	/^test_bonus: $(NAME_BNS) $(OBJ_BNS)$/;"	t
test_default_main	mlx/test/run_tests.sh	/^test_default_main(){$/;"	f
type	mlx/mlx_int.h	/^	int				type;$/;"	m	struct:s_img	typeref:typename:int
use_xshm	mlx/mlx_int.h	/^	int			use_xshm;$/;"	m	struct:s_xvar	typeref:typename:int
validate_color_format	srcs/parser/parse_color.c	/^static void	validate_color_format(t_game *game, char *line, int *i, int j)$/;"	f	typeref:typename:void	file:
validate_color_format	srcs_bonus/parser/parse_color.c	/^static void	validate_color_format(t_game *game, char *line, int *i, int j)$/;"	f	typeref:typename:void	file:
visual	mlx/mlx_int.h	/^	Visual		*visual;$/;"	m	struct:s_xvar	typeref:typename:Visual *
w	includes/cub3d.h	/^	bool	w;$/;"	m	struct:s_keys	typeref:typename:bool
w	includes/cub3d_bonus.h	/^	bool	w;$/;"	m	struct:s_keys	typeref:typename:bool
wall_dist_horiz	srcs/raycasting.c	/^float	wall_dist_horiz(t_game *g, t_point p, float alpha, bool set)$/;"	f	typeref:typename:float
wall_dist_horiz	srcs_bonus/raycasting.c	/^float	wall_dist_horiz(t_game *g, t_point p, float alpha, bool set)$/;"	f	typeref:typename:float
wall_dist_vertical	srcs/raycasting.c	/^float	wall_dist_vertical(t_game *g, t_point p, float alpha, bool set)$/;"	f	typeref:typename:float
wall_dist_vertical	srcs_bonus/raycasting.c	/^float	wall_dist_vertical(t_game *g, t_point p, float alpha, bool set)$/;"	f	typeref:typename:float
wall_side	includes/cub3d.h	/^	int				wall_side;$/;"	m	struct:s_game	typeref:typename:int
wall_side	includes/cub3d_bonus.h	/^	int				wall_side;$/;"	m	struct:s_game	typeref:typename:int
wall_sliding	srcs/movement.c	/^void	wall_sliding(t_game *g, int side, int s)$/;"	f	typeref:typename:void
wall_sliding	srcs_bonus/movement.c	/^void	wall_sliding(t_game *g, int side, int s)$/;"	f	typeref:typename:void
we	includes/cub3d.h	/^	char	*we;$/;"	m	struct:s_input	typeref:typename:char *
we	includes/cub3d_bonus.h	/^	char	*we;$/;"	m	struct:s_input	typeref:typename:char *
width	includes/cub3d.h	/^	int		width;$/;"	m	struct:s_img	typeref:typename:int
width	includes/cub3d_bonus.h	/^	int		width;$/;"	m	struct:s_img	typeref:typename:int
width	mlx/mlx_int.h	/^	int				width;$/;"	m	struct:s_img	typeref:typename:int
win	includes/cub3d.h	/^	void			*win;$/;"	m	struct:s_game	typeref:typename:void *
win	includes/cub3d_bonus.h	/^	void			*win;$/;"	m	struct:s_game	typeref:typename:void *
win1	mlx/test/main.c	/^void	*win1;$/;"	v	typeref:typename:void *
win1	mlx/test/new_win.c	/^void *win1;$/;"	v	typeref:typename:void *
win2	mlx/test/main.c	/^void    *win2;$/;"	v	typeref:typename:void *
win2	mlx/test/new_win.c	/^void *win2;$/;"	v	typeref:typename:void *
win3	mlx/test/main.c	/^void    *win3;$/;"	v	typeref:typename:void *
win_count	mlx/mlx_loop.c	/^static int	win_count(t_xvar *xvar)$/;"	f	typeref:typename:int	file:
win_list	mlx/mlx_int.h	/^	t_win_list	*win_list;$/;"	m	struct:s_xvar	typeref:typename:t_win_list *
window	mlx/mlx_int.h	/^	Window				window;$/;"	m	struct:s_win_list	typeref:typename:Window
wm_delete_window	mlx/mlx_int.h	/^	Atom		wm_delete_window;$/;"	m	struct:s_xvar	typeref:typename:Atom
wm_protocols	mlx/mlx_int.h	/^	Atom		wm_protocols;$/;"	m	struct:s_xvar	typeref:typename:Atom
word_cpy	libft/ft_split.c	/^static char	*word_cpy(const char *s, char c)$/;"	f	typeref:typename:char *	file:
write_dig	libft/ft_putnbr_fd.c	/^static void	write_dig(int n, int fd)$/;"	f	typeref:typename:void	file:
x	includes/cub3d.h	/^	float	x;$/;"	m	struct:s_point	typeref:typename:float
x	includes/cub3d.h	/^	int	x;$/;"	m	struct:s_point_int	typeref:typename:int
x	includes/cub3d.h	/^	int	x;$/;"	m	struct:s_square	typeref:typename:int
x	includes/cub3d_bonus.h	/^	float	x;$/;"	m	struct:s_point	typeref:typename:float
x	includes/cub3d_bonus.h	/^	int	x;$/;"	m	struct:s_point_int	typeref:typename:int
x	includes/cub3d_bonus.h	/^	int	x;$/;"	m	struct:s_square	typeref:typename:int
x0	includes/cub3d.h	/^	int	x0;$/;"	m	struct:s_bresenham	typeref:typename:int
x0	includes/cub3d_bonus.h	/^	int	x0;$/;"	m	struct:s_bresenham	typeref:typename:int
xpm1_x	mlx/test/main.c	/^int	xpm1_x;$/;"	v	typeref:typename:int
xpm1_y	mlx/test/main.c	/^int	xpm1_y;$/;"	v	typeref:typename:int
y	includes/cub3d.h	/^	float	y;$/;"	m	struct:s_point	typeref:typename:float
y	includes/cub3d.h	/^	int	y;$/;"	m	struct:s_point_int	typeref:typename:int
y	includes/cub3d.h	/^	int	y;$/;"	m	struct:s_square	typeref:typename:int
y	includes/cub3d_bonus.h	/^	float	y;$/;"	m	struct:s_point	typeref:typename:float
y	includes/cub3d_bonus.h	/^	int	y;$/;"	m	struct:s_point_int	typeref:typename:int
y	includes/cub3d_bonus.h	/^	int	y;$/;"	m	struct:s_square	typeref:typename:int
y0	includes/cub3d.h	/^	int	y0;$/;"	m	struct:s_bresenham	typeref:typename:int
y0	includes/cub3d_bonus.h	/^	int	y0;$/;"	m	struct:s_bresenham	typeref:typename:int
